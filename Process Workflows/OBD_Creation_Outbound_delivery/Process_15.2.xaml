<Activity mc:Ignorable="sap sap2010" x:Class="Process_15_2" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ucas="clr-namespace:UiPath.Core.Activities.SAP;assembly=UiPath.UiAutomation.Activities" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uix="http://schemas.uipath.com/workflow/activities/uix" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_InputFilePath" Type="InArgument(x:String)" />
    <x:Property Name="out_dtDocFile" Type="OutArgument(sd:DataTable)" />
    <x:Property Name="in_SaleOrderSheetName" Type="InArgument(x:String)" />
    <x:Property Name="in_SaleOrderFileName" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1514,2011</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Process_15_2_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationNext.Contracts</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.UIAutomationNext.Models.CV</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Core.Activities.SAP</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Process_15_2" sap:VirtualizedContainerService.HintSize="1016,1906" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:List(x:String)" Name="str_CopyColumn" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="954,141" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;OBD Creation: Step 2 process started&quot;]" />
    <uix:NCheckState DisplayName="Check App State 'Sales Document'" sap:VirtualizedContainerService.HintSize="954,298" sap2010:WorkflowViewState.IdRef="NCheckState_1" Version="V3">
      <uix:NCheckState.IfExists>
        <Sequence DisplayName="Target appears" sap:VirtualizedContainerService.HintSize="450,81" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="388,143" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Sale Order tab is accessible&quot;]" />
          <ui:Click AlterIfDisabled="{x:Null}" DelayBefore="{x:Null}" DelayMS="{x:Null}" SendWindowMessages="{x:Null}" ClickType="CLICK_SINGLE" DisplayName="Click 'Button Multiple'" sap:VirtualizedContainerService.HintSize="388,107" sap2010:WorkflowViewState.IdRef="Click_1" KeyModifiers="None" MouseButton="BTN_LEFT" SimulateClick="True">
            <ui:Click.CursorPosition>
              <ui:CursorPosition Position="Center">
                <ui:CursorPosition.OffsetX>
                  <InArgument x:TypeArguments="x:Int32" />
                </ui:CursorPosition.OffsetX>
                <ui:CursorPosition.OffsetY>
                  <InArgument x:TypeArguments="x:Int32" />
                </ui:CursorPosition.OffsetY>
              </ui:CursorPosition>
            </ui:Click.CursorPosition>
            <ui:Click.Target>
              <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="64a296a5-4453-49cf-91cd-62b37071356a" InformativeScreenshot="921957b43240fa71d63d0a922f59791a" Selector="&lt;wnd app='saplogon.exe' title='Sales order items' /&gt;&lt;sap tooltip='Multiple selection' type='GuiButton' idx='2' /&gt;" WaitForReady="COMPLETE">
                <ui:Target.TimeoutMS>
                  <InArgument x:TypeArguments="x:Int32" />
                </ui:Target.TimeoutMS>
              </ui:Target>
            </ui:Click.Target>
          </ui:Click>
        </Sequence>
      </uix:NCheckState.IfExists>
      <uix:NCheckState.IfNotExists>
        <Sequence DisplayName="Target does not appear" sap:VirtualizedContainerService.HintSize="450,81" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="388,143" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="[UiPath.Core.Activities.LogLevel.Warn]" Message="[&quot;Sale Order tab is not accessible&quot;]" />
          <Throw Exception="[New BusinessRuleException(&quot;Sale Order tab is not accessible&quot;)]" sap:VirtualizedContainerService.HintSize="388,90" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </Sequence>
      </uix:NCheckState.IfNotExists>
      <uix:NCheckState.Target>
        <uix:TargetAnchorable DesignTimeRectangle="34, 279, 202, 21" DesignTimeScaleFactor="1" ElementType="Text" FriendlyName="'Sales Document'" FullSelectorArgument="&lt;sap text='Sales Document' type='GuiTextField' /&gt;" FuzzySelectorArgument="&lt;sap text='Sales Document' type='GuiTextField' check:text='Sales Document' /&gt;" Guid="71df2a0e-245a-4c25-81f9-ae3f7bae0ff5" InformativeScreenshot="bcd1251cf08530477f3b985c9632ef47.png" ScopeSelectorArgument="&lt;wnd app='saplogon.exe' title='Sales order items' /&gt;" SearchSteps="Selector" Version="V2" Visibility="Interactive" WaitForReadyArgument="Complete" />
      </uix:NCheckState.Target>
    </uix:NCheckState>
    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Reading PDP file" Code="Try&#xA;    ' Define the Excel file path and sheet name&#xA;    Dim filePath As String = System.IO.Path.GetFullPath(in_FilePath)&#xA;    Dim sheetName As String = in_SheetName&#xA;&#xA;    ' Initialize Excel application&#xA;    Dim excelApp As Microsoft.Office.Interop.Excel.Application = New Microsoft.Office.Interop.Excel.Application()&#xA;&#xA;    ' Disable alerts and screen updating for faster execution&#xA;    excelApp.DisplayAlerts = False&#xA;    excelApp.ScreenUpdating = False&#xA;&#xA;    ' Open the Excel workbook in read-only mode&#xA;    Dim workbook As Microsoft.Office.Interop.Excel.Workbook = excelApp.Workbooks.Open(filePath, ReadOnly:=True)&#xA;&#xA;    ' Select the specified worksheet&#xA;    Dim worksheet As Microsoft.Office.Interop.Excel.Worksheet = DirectCast(workbook.Sheets(sheetName), Microsoft.Office.Interop.Excel.Worksheet)&#xA;&#xA;    ' Get the used range of the worksheet&#xA;    Dim usedRange As Microsoft.Office.Interop.Excel.Range = worksheet.UsedRange&#xA;&#xA;    ' Create a DataTable to store the Excel data&#xA;    Dim dataTable As New DataTable(sheetName)&#xA;&#xA;    ' Get values from the used range into a 2D array for faster access&#xA;    Dim values As Object(,) = DirectCast(usedRange.Value, Object(,))&#xA;    Dim rowCount As Integer = values.GetLength(0)&#xA;    Dim colCount As Integer = values.GetLength(1)&#xA;&#xA;    ' Add columns to DataTable using values from the first row&#xA;    For colIndex As Integer = 1 To colCount&#xA;        Dim columnName As String = values(1, colIndex).ToString()&#xA;        dataTable.Columns.Add(columnName, GetType(String))&#xA;    Next&#xA;&#xA;    ' Populate data starting from the second row&#xA;    For rowIndex As Integer = 2 To rowCount&#xA;        Dim dataRow As DataRow = dataTable.NewRow()&#xA;        For colIndex As Integer = 1 To colCount&#xA;            Dim cellValue As Object = values(rowIndex, colIndex)&#xA;            If cellValue IsNot Nothing Then&#xA;                dataRow(colIndex - 1) = cellValue.ToString()&#xA;            Else&#xA;                dataRow(colIndex - 1) = &quot;&quot;&#xA;            End If&#xA;        Next&#xA;        dataTable.Rows.Add(dataRow)&#xA;    Next&#xA;&#xA;    ' Close the Excel workbook and release resources&#xA;    workbook.Close(False)&#xA;&#xA;    ' Enable alerts and screen updating&#xA;    excelApp.DisplayAlerts = True&#xA;    excelApp.ScreenUpdating = True&#xA;&#xA;&#xA;    ' Log a message indicating successful execution&#xA;    Console.WriteLine(&quot;Excel file read successfully, and data is saved to DataTable.&quot;)&#xA;    out_datatable = dataTable&#xA;&#xA;Catch ex As Exception&#xA;    ' Log the exception message&#xA;    Console.WriteLine(&quot;Error reading Excel file: &quot; &amp; ex.Message)&#xA;    Throw ex&#xA;End Try&#xA;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="954,196" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_SheetName">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_SaleOrderSheetName" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_FilePath">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_InputFilePath+in_SaleOrderFileName" />
        </InArgument>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_datatable">
          <VisualBasicReference x:TypeArguments="sd:DataTable" ExpressionText="out_dtDocFile" />
        </OutArgument>
      </ui:InvokeCode.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeCode>
    <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="954,52" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_1">
      <ueab:ExcelProcessScopeX.Body>
        <ActivityAction x:TypeArguments="ui:IExcelProcess">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="496,192" sap2010:WorkflowViewState.IdRef="Sequence_7">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="434,81" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_1" ResizeWindow="None" WorkbookPath="[in_InputFilePath+in_SaleOrderFileName]">
              <ueab:ExcelApplicationCard.Body>
                <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="496,699" sap2010:WorkflowViewState.IdRef="Sequence_6">
                    <Sequence.Variables>
                      <Variable x:TypeArguments="x:Int32" Name="FirstRowDocNum" />
                      <Variable x:TypeArguments="x:Int32" Name="LastRowDocNum" />
                    </Sequence.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ueab:FindFirstLastDataRowX BlankRowsToSkip="1" ColumnName="Doc Number" ConfigureLastRowAs="LastPopulatedRow" DisplayName="Find First/Last Data Row" FirstRowIndex="[FirstRowDocNum]" FirstRowOffset="0" HasHeaders="True" sap:VirtualizedContainerService.HintSize="434,308" sap2010:WorkflowViewState.IdRef="FindFirstLastDataRowX_1" LastRowIndex="[LastRowDocNum]" LastRowOffset="0" Range="[Excel.Sheet(in_SaleOrderSheetName)]" VisibleRowsOnly="True" />
                    <ueab:CopyPasteRangeX DestinationRange="[ExcelClipboardX.Value]" DisplayName="Copy/Paste Range" sap:VirtualizedContainerService.HintSize="434,240" sap2010:WorkflowViewState.IdRef="CopyPasteRangeX_1" PasteOptions="All" SourceRange="[Excel.Sheet(in_SaleOrderSheetName).Range(&quot;A&quot;+FirstRowDocNum.ToString+&quot;:A&quot;+LastRowDocNum.ToString)]" Transpose="False" />
                  </Sequence>
                </ActivityAction>
              </ueab:ExcelApplicationCard.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ueab:ExcelApplicationCard>
          </Sequence>
        </ActivityAction>
      </ueab:ExcelProcessScopeX.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ueab:ExcelProcessScopeX>
    <Assign DisplayName="Assign - Coping All Costomer Codes from Excel Sheet" sap:VirtualizedContainerService.HintSize="954,83" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:List(x:String)">[str_CopyColumn]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:List(x:String)" xml:space="preserve">[(From row In out_dtDocFile.AsEnumerable()
                                           Select row.Field(Of String)("Distributor Code")).ToList()]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - Removing Empty or Null Values" sap:VirtualizedContainerService.HintSize="954,82" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:List(x:String)">[str_CopyColumn]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:List(x:String)">[str_CopyColumn.Where(Function(item) Not String.IsNullOrEmpty(item)).ToList()]</InArgument>
      </Assign.Value>
    </Assign>
    <uix:NCheckState DisplayName="Check App State 'Select Single Values'" sap:VirtualizedContainerService.HintSize="954,322" sap2010:WorkflowViewState.IdRef="NCheckState_2" Version="V3">
      <uix:NCheckState.IfExists>
        <Sequence DisplayName="Target appears" sap:VirtualizedContainerService.HintSize="450,81" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ucas:ClickToolbarButton ContinueOnError="{x:Null}" DelayAfter="{x:Null}" DelayBefore="{x:Null}" AlterIfDisabled="True" DisplayName="Click Toolbar Button 'Button Upload'" sap:VirtualizedContainerService.HintSize="388,160" sap2010:WorkflowViewState.IdRef="ClickToolbarButton_1" Item="Upload from clipboard   (Shift+F12)">
            <ucas:ClickToolbarButton.Items>
              <scg:List x:TypeArguments="x:String" Capacity="16">
                <x:String xml:space="preserve">Copy   (F8)</x:String>
                <x:String xml:space="preserve">Check entries   (Enter)</x:String>
                <x:String xml:space="preserve">Maintain Selection Options   (F2)</x:String>
                <x:String xml:space="preserve">Insert line   (Shift+F1)</x:String>
                <x:String xml:space="preserve">Delete Selection Row   (Shift+F2)</x:String>
                <x:String xml:space="preserve">Delete entire selection line   (Shift+F4)</x:String>
                <x:String xml:space="preserve">Help on screen   (Shift+F6)</x:String>
                <x:String xml:space="preserve">Multiple selection..   (F6)</x:String>
                <x:String xml:space="preserve">Import from Text File   (Shift+F11)</x:String>
                <x:String xml:space="preserve">Upload from clipboard   (Shift+F12)</x:String>
                <x:String xml:space="preserve">Cancel   (F12)</x:String>
              </scg:List>
            </ucas:ClickToolbarButton.Items>
            <ucas:ClickToolbarButton.Target>
              <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="c15be7f5-b779-4bed-a31a-b94be871cd79" InformativeScreenshot="4f7fb59d5a18730192580d71d94f7d31" Selector="&lt;wnd app='saplogon.exe' cls='#32770' title='Multiple Selection for Sales Document' idx='*' /&gt;&lt;sap id='tbar[0]/btn[24]' /&gt;" WaitForReady="COMPLETE">
                <ui:Target.TimeoutMS>
                  <InArgument x:TypeArguments="x:Int32" />
                </ui:Target.TimeoutMS>
              </ui:Target>
            </ucas:ClickToolbarButton.Target>
          </ucas:ClickToolbarButton>
          <ucas:ClickToolbarButton ContinueOnError="{x:Null}" DelayAfter="{x:Null}" DelayBefore="{x:Null}" AlterIfDisabled="True" DisplayName="Click Toolbar Button 'Button Upload'" sap:VirtualizedContainerService.HintSize="388,160" sap2010:WorkflowViewState.IdRef="ClickToolbarButton_2" Item="Check entries   (Enter)">
            <ucas:ClickToolbarButton.Items>
              <scg:List x:TypeArguments="x:String" Capacity="16">
                <x:String xml:space="preserve">Copy   (F8)</x:String>
                <x:String xml:space="preserve">Check entries   (Enter)</x:String>
                <x:String xml:space="preserve">Maintain Selection Options   (F2)</x:String>
                <x:String xml:space="preserve">Insert line   (Shift+F1)</x:String>
                <x:String xml:space="preserve">Delete Selection Row   (Shift+F2)</x:String>
                <x:String xml:space="preserve">Delete entire selection line   (Shift+F4)</x:String>
                <x:String xml:space="preserve">Help on screen   (Shift+F6)</x:String>
                <x:String xml:space="preserve">Multiple selection..   (F6)</x:String>
                <x:String xml:space="preserve">Import from Text File   (Shift+F11)</x:String>
                <x:String xml:space="preserve">Upload from clipboard   (Shift+F12)</x:String>
                <x:String xml:space="preserve">Cancel   (F12)</x:String>
              </scg:List>
            </ucas:ClickToolbarButton.Items>
            <ucas:ClickToolbarButton.Target>
              <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="c15be7f5-b779-4bed-a31a-b94be871cd79" InformativeScreenshot="7dc54fd77dcaf96b099af237b4b535e0" Selector="&lt;wnd app='saplogon.exe' cls='#32770' title='Multiple Selection for Sales Document' idx='*' /&gt;&lt;sap id='tbar[0]' /&gt;" WaitForReady="COMPLETE">
                <ui:Target.TimeoutMS>
                  <InArgument x:TypeArguments="x:Int32" />
                </ui:Target.TimeoutMS>
              </ui:Target>
            </ucas:ClickToolbarButton.Target>
          </ucas:ClickToolbarButton>
          <ucas:ClickToolbarButton ContinueOnError="{x:Null}" DelayAfter="{x:Null}" DelayBefore="{x:Null}" AlterIfDisabled="True" DisplayName="Click Toolbar Button 'Button Upload'" sap:VirtualizedContainerService.HintSize="388,160" sap2010:WorkflowViewState.IdRef="ClickToolbarButton_3" Item="Copy   (F8)">
            <ucas:ClickToolbarButton.Items>
              <scg:List x:TypeArguments="x:String" Capacity="16">
                <x:String xml:space="preserve">Copy   (F8)</x:String>
                <x:String xml:space="preserve">Check entries   (Enter)</x:String>
                <x:String xml:space="preserve">Maintain Selection Options   (F2)</x:String>
                <x:String xml:space="preserve">Insert line   (Shift+F1)</x:String>
                <x:String xml:space="preserve">Delete Selection Row   (Shift+F2)</x:String>
                <x:String xml:space="preserve">Delete entire selection line   (Shift+F4)</x:String>
                <x:String xml:space="preserve">Help on screen   (Shift+F6)</x:String>
                <x:String xml:space="preserve">Multiple selection..   (F6)</x:String>
                <x:String xml:space="preserve">Import from Text File   (Shift+F11)</x:String>
                <x:String xml:space="preserve">Upload from clipboard   (Shift+F12)</x:String>
                <x:String xml:space="preserve">Cancel   (F12)</x:String>
              </scg:List>
            </ucas:ClickToolbarButton.Items>
            <ucas:ClickToolbarButton.Target>
              <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="c15be7f5-b779-4bed-a31a-b94be871cd79" InformativeScreenshot="7dc54fd77dcaf96b099af237b4b535e0" Selector="&lt;wnd app='saplogon.exe' cls='#32770' title='Multiple Selection for Sales Document' idx='*' /&gt;&lt;sap id='tbar[0]' /&gt;" WaitForReady="COMPLETE">
                <ui:Target.TimeoutMS>
                  <InArgument x:TypeArguments="x:Int32" />
                </ui:Target.TimeoutMS>
              </ui:Target>
            </ucas:ClickToolbarButton.Target>
          </ucas:ClickToolbarButton>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="388,143" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Document numbers are uploaded and read to execute&quot;]" />
        </Sequence>
      </uix:NCheckState.IfExists>
      <uix:NCheckState.IfNotExists>
        <Sequence DisplayName="Target does not appear" sap:VirtualizedContainerService.HintSize="450,105" sap2010:WorkflowViewState.IdRef="Sequence_5">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </uix:NCheckState.IfNotExists>
      <uix:NCheckState.Target>
        <uix:TargetAnchorable DesignTimeRectangle="13, 62, 126, 20" DesignTimeScaleFactor="1" FriendlyName="'Select Single Values'" FullSelectorArgument="&lt;sap text='Select Single Values' type='GuiTab' /&gt;" FuzzySelectorArgument="&lt;sap text='Select Single Values' type='GuiTab' check:text='Select Single Values' /&gt;" Guid="590eb026-1c9d-4696-9d7f-7446279f82e7" InformativeScreenshot="b0d7bb02fc1e8e4ed7a26e1d400c60c8.png" ScopeSelectorArgument="&lt;wnd app='saplogon.exe' title='Multiple Selection for Sales Document' idx='*' /&gt;" SearchSteps="Selector" Version="V2" Visibility="Interactive" WaitForReadyArgument="Complete" />
      </uix:NCheckState.Target>
    </uix:NCheckState>
    <ucas:ClickToolbarButton ContinueOnError="{x:Null}" DelayAfter="{x:Null}" DelayBefore="{x:Null}" AlterIfDisabled="True" DisplayName="Click Toolbar Button 'Toolbar  tbar[1]'" sap:VirtualizedContainerService.HintSize="954,160" sap2010:WorkflowViewState.IdRef="ClickToolbarButton_4" Item="Execute   (F8)">
      <ucas:ClickToolbarButton.Items>
        <scg:List x:TypeArguments="x:String" Capacity="4">
          <x:String xml:space="preserve">Execute   (F8)</x:String>
          <x:String xml:space="preserve">Get Variant...   (Shift+F5)</x:String>
          <x:String xml:space="preserve">Program Documentation   (Shift+F1)</x:String>
          <x:String xml:space="preserve">Collective Processing Logs   (Ctrl+F1)</x:String>
        </scg:List>
      </ucas:ClickToolbarButton.Items>
      <ucas:ClickToolbarButton.Target>
        <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="bce40469-9b2b-49fa-8e08-e6e8e9d34b91" InformativeScreenshot="0615ca4c358267e3832de369d71733a5" Selector="&lt;wnd app='saplogon.exe' title='Sales order items' /&gt;&lt;sap id='tbar[1]' type='GuiToolbar' /&gt;" WaitForReady="COMPLETE">
          <ui:Target.TimeoutMS>
            <InArgument x:TypeArguments="x:Int32" />
          </ui:Target.TimeoutMS>
        </ui:Target>
      </ucas:ClickToolbarButton.Target>
    </ucas:ClickToolbarButton>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="954,141" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;OBD Creation: Step 2 process ended&quot;]" />
  </Sequence>
</Activity>